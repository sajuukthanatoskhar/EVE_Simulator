from unittest import mock

#from setuptools.dist import assert_string_list

from components.StellarComponents import StarSystem, Planet
from tests.commonimports import *


@st.composite
def generate_planet(draw, a_starsystem: StarSystem):
    """
    Generates an example planet, can only be used in a st.Data draw
    :return: Returns a planet
    """

    a_planet = Planet(a_starsystem, produces = draw(st.sampled_from(["Metals", "Plastics", "Robotics", "Energy"])))

    return a_planet
@pytest.mark.UnitTest
class TestStarSystem:
    """
    Tests involved
    Init
    attr tests
    attr type
    """

    def test_init(self):
        """
        Tests creation of the Starsystem class
        """
        starsystem_example = StarSystem("3T7-M8")

        assert starsystem_example
        assert isinstance(starsystem_example, StarSystem)


    @pytest.mark.parametrize('attr_to_test, attr_type', ( ['name', str], ['star_system_links', set], ['planets', set]))
    def test_attrs_types_names(self, attr_to_test, attr_type):
        """
        Tests the attributes of the starsystem class and its types
        :param attr_to_test:
        :param attr_type:
        :return:
        """
        starsystem_example = StarSystem("3T7-M8")

        assert hasattr(starsystem_example, attr_to_test)
        assert isinstance(getattr(starsystem_example, attr_to_test), attr_type)

@pytest.mark.UnitTest
class TestPlanet:


    def test_init(self):
        """
        Tests creation of the Starsystem class
        """
        with mock.patch('components.StellarComponents.StarSystem') as StarSystem:

            planet_example = Planet(StarSystem('3T7-M8'))

            assert planet_example
            assert isinstance(planet_example, Planet)


    @pytest.mark.parametrize('attr_to_test, attr_type', ( ['location', StarSystem], ['productionoutput', str], ['name', str]))
    def test_attrs_types_names(self, attr_to_test, attr_type):
        """
        Tests the attributes of the starsystem class and its types
        :param attr_to_test:
        :param attr_type:
        :return:
        """

        with mock.patch('components.StellarComponents.StarSystem') as StarSystem:
            StarSystem.name.return_value = '3T7-M8'
            planet_example = Planet(StarSystem('3T7-M8'))

            assert planet_example
            assert isinstance(planet_example, Planet)
            assert hasattr(planet_example, attr_to_test)
            assert isinstance(getattr(planet_example, attr_to_test), attr_type) # Fix problem for mocked StarSystem


@pytest.mark.IntegrationTest
class TestPlanetStarsystem:
    """
    Integration Test
    """
    @ht.given(data= st.data())
    def test_init(self, data):
        """
        Tests the initialisation of the Starsystem with planets that are autogenerated
        :param data: Hypothesis.Strategy for data creation
        """
        starsystem_example = StarSystem("3T7-M8")

        for i in range(10):
            starsystem_example.add_Planet(data.draw(generate_planet(starsystem_example)))

            a_planet = starsystem_example.planets[-1]
            assert isinstance(a_planet.location, StarSystem)
            assert a_planet.location == starsystem_example.name
            assert a_planet.name == f"{a_planet.location.name}-P{len(a_planet.location.planets) + 1}"

        assert len(starsystem_example.planets)
